import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import "../../../styles/admin.css";
import { v4 as uuidv4 } from "uuid";

function EditProducto(props) {
  let { id } = useParams();
  const [productoData, setProductoData] = useState(null);
  const [marca, setMarca] = useState("");
  const [precio, setPrecio] = useState("");
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [marcasDisponibles, setMarcasDisponibles] = useState([]);
  const [imageUrls, setImageUrls] = useState([]);

  const fetchMarcasDisponibles = async () => {
    try {
      const response = await fetch("http://localhost:3000/marcas");
      const data = await response.json();
      const marcas = data.results.map((marca) => marca.marca);
      setMarcasDisponibles(marcas);
    } catch (error) {
      console.error("Error al obtener las marcas:", error);
    }
  };

  const handleModeloChange = (event) => {
    setProductoData({ ...productoData, modelo: event.target.value });
  };

  const handleMarcaChange = (event) => {
    setMarca(event.target.value);
  };

  const handlePrecioChange = (event) => {
    setPrecio(event.target.value);
  };

  const handleFileChange = (index, event) => {
    const files = event.target.files;
    const file = files[0];
    setSelectedFiles((prevSelectedFiles) => {
      const updatedFiles = [...prevSelectedFiles];
      updatedFiles[index] = file;
      return updatedFiles;
    });
  };

  const handleAddField = () => {
    setSelectedFiles([...selectedFiles, null]);
  };

  const handleRemoveField = (index) => {
    const updatedFiles = [...selectedFiles];
    updatedFiles.splice(index, 1);
    setSelectedFiles(updatedFiles);

    const updatedUrls = [...imageUrls];
    updatedUrls.splice(index, 1);
    setImageUrls(updatedUrls);
  };

  useEffect(() => {
    const fetchProductosDisponibles = async () => {
      try {
        const response = await fetch("http://localhost:3000/products");
        const data = await response.json();
        console.log(data);
        const foundProducto = data.results.find((item) => item._id === id);
        setProductoData(foundProducto);
        setMarca(foundProducto.marca);
        setPrecio(foundProducto.precio);
        setImageUrls(foundProducto.imageUrls || []);
      } catch (error) {
        console.error("Error al obtener los productos:", error);
      }
    };

    fetchMarcasDisponibles();
    fetchProductosDisponibles();
  }, [id]);

  const handleEdit = async (event) => {
    event.preventDefault();

    try {
      const formDataArray = selectedFiles.map((file) => {
        if (!file) return null;

        const formData = new FormData();
        formData.append("archivo", file);
        return formData;
      });

      const uploadPromises = formDataArray.map((formData) => {
        if (!formData) return null;

        return fetch("http://localhost:3000/upimage", {
          method: "POST",
          body: formData,
        }).then((response) => response.json());
      });

      const uploadResults = await Promise.all(uploadPromises);

      const imageUrlArray = uploadResults.map((result) => {
        return result ? result.url : null;
      });

      console.log(imageUrlArray);
      console.log("Archivos subidos exitosamente");

      try {
        await fetch(`http://localhost:3000/products/${productoData._id}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            modelo: productoData.modelo,
            marca: marca,
            precio: precio,
            imageUrls: [...imageUrls, ...imageUrlArray],
          }),
        });

        alert("Producto actualizado exitosamente");

        // Recargar la página o realizar otra acción necesaria después de la actualización
        window.location.reload();
      } catch (error) {
        console.error("Error al actualizar el producto:", error);
      }
    } catch (error) {
      console.error("Error al subir el archivo:", error);
    }
  };

  if (!productoData) {
    return <div>Cargando...</div>;
  }

  return (
    <div className="admin-container">
      <h1>Editar Producto</h1>
      <form onSubmit={handleEdit}>
        <div>
          <label htmlFor="modelo">Modelo:</label>
          <input
            type="text"
            id="modelo"
            value={productoData.modelo}
            onChange={handleModeloChange}
          />
        </div>
        <div>
          <label htmlFor="marca">Marca:</label>
          <select id="marca" value={marca} onChange={handleMarcaChange}>
            <option value="">Seleccione una marca</option>
            {marcasDisponibles.map((marca) => (
              <option key={uuidv4()} value={marca}>
                {marca}
              </option>
            ))}
          </select>
        </div>
        <div>
          <label htmlFor="precio">Precio:</label>
          <input
            type="number"
            id="precio"
            value={precio}
            onChange={handlePrecioChange}
          />
        </div>
        <div>
          <label htmlFor="imagenes">Imágenes:</label>
          {selectedFiles.map((file, index) => (
            <div key={uuidv4()} className="file-field">
              <input
                type="file"
                id={`imagen-${index}`}
                accept="image/*"
                onChange={(event) => handleFileChange(index, event)}
              />
              <button
                type="button"
                onClick={() => handleRemoveField(index)}
                disabled={selectedFiles.length === 1}
              >
                Eliminar
              </button>
            </div>
          ))}
          <button type="button" onClick={handleAddField}>
            Agregar campo de imagen
          </button>
        </div>
        <button type="submit">Guardar cambios</button>
      </form>
    </div>
  );
}

export default EditProducto;
